[
    {
        "question": "Сколько детей имеет узел октодерева?",
        "options": ["три", "четыре", "восемь", "шесть"],
        "answer": "восемь",
        "theory": "Узел в октодереве всегда делится на 8 потомков, поскольку пространство делится по трём осям (x, y, z), каждая из которых разделяется пополам, образуя 8 подпространств. Это аналог квадродерева в 3D."
    },
    {
        "question": "Что обозначает термин \"октодерево\"?",
        "options": ["восьмигранник", "пространство", "восьмёрка", "восьмидерево"],
        "answer": "восьмидерево",
        "theory": "Термин \"октодерево\" (octree) обозначает древовидную структуру, в которой каждый узел делится на 8 подузлов. Это аналог квадродерева для трёхмерного пространства. Он активно применяется в играх, 3D-графике и симуляциях."
    },
    {
        "question": "Сколько потомков имеет узел квадродерева после разбиения?",
        "options": ["два", "четыре", "восемь", "шесть"],
        "answer": "четыре",
        "theory": "Квадродерево – это иерархическая структура данных, где каждый узел делится на четыре подузла, соответствующие четырём квадрантам двумерного пространства. Это упрощает обработку данных, например, в задачах поиска коллизий и отображения."
    },
    {
        "question": "Для чего применяется октодерево в компьютерной графике?",
        "options": ["Для уменьшения количества полигонов", "Для деления объёмного пространства на части", "Для сортировки текстур", "Для обработки аудио"],
        "answer": "Для деления объёмного пространства на части",
        "theory": "Октодерево (octree) – это структура, используемая для представления трёхмерного пространства. Каждый узел делится на восемь частей (октантов). Это удобно при работе с объёмными данными: например, при определении, какие объекты находятся в зоне видимости камеры, при поиске коллизий или рендеринге."
    },
    {
        "question": "Когда заканчивается деление узлов при построении квадродерева?",
        "options": ["Когда память закончится", "Когда все узлы равны", "Когда достигнута максимальная глубина или выполнено условие однородности", "После 100 итераций"],
        "answer": "Когда достигнута максимальная глубина или выполнено условие однородности",
        "theory": "Разбиение в квадродереве продолжается, пока не достигнута максимальная глубина или не выполнено условие однородности, например: все пиксели в блоке одинакового цвета, либо количество объектов в блоке не превышает заданного порога. Это позволяет избежать ненужного углубления и сэкономить ресурсы."
    },
    {
        "question": "Какова основная цель использования квадродерева в играх и симуляциях?",
        "options": ["Повышение FPS", "Ускорение поиска объектов в 2D-пространстве", "Построение теней", "Обновление интерфейса"],
        "answer": "Ускорение поиска объектов в 2D-пространстве",
        "theory": "Квадродеревья позволяют эффективно управлять пространственным размещением объектов. Вместо того чтобы проверять столкновения или видимость между всеми объектами на сцене, можно ограничиться проверкой объектов внутри соответствующего квадранта, что существенно ускоряет расчёты."
    },
    {
        "question": "В каком случае квадродерево будет неэффективно?",
        "options": ["Если объекты равномерно распределены", "Если объекты сгруппированы в одном углу", "Если изображение состоит из одного цвета", "Если используется логарифмическая шкала"],
        "answer": "Если объекты сгруппированы в одном углу",
        "theory": "Квадродерево работает эффективно, когда объекты равномерно распределены по сцене. Если все элементы находятся в одной небольшой области, дерево может избыточно углубляться в эту часть, создавая длинную цепочку однотипных делений, что ухудшает производительность."
    },
    {
        "question": "Что произойдёт при превышении максимального уровня глубины в квадродереве?",
        "options": ["Построение остановится", "Все узлы удалятся", "Вся сцена перерисуется", "Объекты исчезнут"],
        "answer": "Построение остановится",
        "theory": "При построении квадродерева всегда устанавливается максимально допустимая глубина, чтобы дерево не стало слишком большим. Как только эта глубина достигнута, деление прекращается, даже если текущая область не однородна или содержит несколько объектов. Это позволяет контролировать объём данных и время обработки."
    },
    {
        "question": "Почему при построении квадродерева важно проверять, помещается ли объект полностью в подузел?",
        "options": ["Чтобы избежать избыточного хранения объекта в нескольких узлах", "Чтобы можно было удалить исходную сцену", "Чтобы дерево было симметричным", "Чтобы всегда делить узлы на четыре части"],
        "answer": "Чтобы избежать избыточного хранения объекта в нескольких узлах",
        "theory": "Если объект целиком помещается в подузел, его следует переместить именно туда. В противном случае, если он пересекает границы, его оставляют в родительском узле. Это предотвращает дублирование, избыточные проверки при коллизиях и перегрузку дерева."
    },
    {
        "question": "Какая проблема может возникнуть при построении квадродерева, если объекты очень большого размера?",
        "options": ["Дерево будет симметричным", "Объекты невозможно поместить в подузлы, и они останутся на верхних уровнях", "Дерево получится несбалансированным", "Память не выделится"],
        "answer": "Объекты невозможно поместить в подузлы, и они останутся на верхних уровнях",
        "theory": "Если объект слишком большой, он может перекрывать несколько подузлов. Это означает, что он останется в родительском узле, и чем больше таких объектов, тем меньше пользы от дерева, поскольку узлы перегружены и глубина не даёт выгоды в оптимизации."
    },
    {
        "question": "Зачем чаще всего используются квадро- и октодеревья в задачах двумерной и трёхмерной графики?",
        "options": ["Для хранения точек и ускорения поиска ближайших", "Для хранения больших объектов, перекрывающих сцену", "Для сжатия текстур", "Для анимации"],
        "answer": "Для хранения точек и ускорения поиска ближайших",
        "theory": "Классическое использование – поиск ближайших точек, коллизий, видимости, кластеризация, и т.д. Для этого чаще всего хранят точки, потому что они просты в обработке и хорошо индексируются деревом.\nОбъекты с размерами – это уже продвинутый уровень, и с ними дерево усложняется (например, если объект попадает сразу в несколько подузлов)."
    },
    {
        "question": "В чём преимущество итеративного построения квадродерева по сравнению с рекурсивным?",
        "options": ["Итеративный подход требует меньше памяти на стек вызовов", "Рекурсивный метод проще в реализации", "Рекурсивный метод быстрее", "Итеративный подход не поддерживает деление узлов"],
        "answer": "Итеративный подход требует меньше памяти на стек вызовов",
        "theory": "Рекурсивный способ интуитивно понятен, но может привести к переполнению стека, особенно при большой глубине дерева. Итеративный подход с использованием очередей или стека вручную позволяет избежать этой проблемы и лучше управлять памятью, особенно в embedded-средах или играх."
    },
    {
        "question": "Какая проблема может возникнуть при построении квадродерева, если объекты очень большого размера?",
        "options": ["Объекты невозможно поместить в подузлы, и они останутся на верхних уровнях", "Дерево будет симметричным", "Дерево получится несбалансированным", "Память не выделится"],
        "answer": "Объекты невозможно поместить в подузлы, и они останутся на верхних уровнях",
        "theory": "Если объект слишком большой, он может перекрывать несколько подузлов. Это означает, что он останется в родительском узле, и чем больше таких объектов, тем меньше пользы от дерева, поскольку узлы перегружены и глубина не даёт выгоды в оптимизации."
    },
    {
        "question": "Что обычно хранят в листовых узлах квадродерева при хранении точек с цветом?",
        "options": ["Ссылки на соседей", "Массив текстур", "Координаты и цвет пикселей", "Звук и частота"],
        "answer": "Координаты и цвет пикселей",
        "theory": "В задачах вроде сжатия изображений, анализа регионов или фрактального кодирования, квадродерево делит картинку до тех пор, пока участок не станет однородным. В листовых узлах хранятся координаты области и представление её цвета (среднее значение, доминантный цвет и т.п.), что позволяет восстановить изображение или провести анализ."
    },
    {
        "question": "Почему при построении октодерева важно учитывать bounding box (граничный объём) объектов?",
        "options": ["Он определяет размер сцены", "Он используется для визуализации", "Он нужен, чтобы правильно распределить объекты по подузлам", "Он влияет на цвет объектов"],
        "answer": "Он нужен, чтобы правильно распределить объекты по подузлам",
        "theory": "Bounding box (ограничивающий объём) – минимальный куб (или прямоугольный параллелепипед), охватывающий объект. При построении октодерева нужно определить, в какие подузлы может попасть bounding box объекта. Только по нему можно понять, куда поместить объект и нужно ли деление дальше."
    },
    {
        "question": "В чём преимущество квадродерева по сравнению с обычным перебором всех точек при поиске ближайших соседей?",
        "options": ["Уменьшение времени поиска", "Повышение точности координат", "Использование цвета", "Автоматическая кластеризация"],
        "answer": "Уменьшение времени поиска",
        "theory": "Поиск ближайших соседей – это частая задача в компьютерной графике, анализе данных и симуляциях. Если перебирать все точки напрямую, сложность будет O(n) для каждой операции поиска, где n – количество точек. Это плохо масштабируется.\nКвадродерево же делит пространство на области, где находятся точки. Когда происходит запрос (например, \"найди ближайшую точку к этой\"), алгоритм сначала определяет, в какой ячейке дерева находится запрашиваемая точка, и ищет ближайших только в этой области и её соседях. Это снижает количество проверок до O(log n) в среднем случае. Квадродерево эффективно отсекает заведомо далёкие точки, что делает его отличным инструментом для ускорения."
    },
    {
        "question": "Где чаще всего применяются октодеревья?",
        "options": ["Для хранения иерархии окон в GUI", "В 3D-графике и физике для ускорения обработки объектов", "В базах данных", "В обработке текстов"],
        "answer": "В 3D-графике и физике для ускорения обработки объектов",
        "theory": "Октодерево – это аналог квадродерева, но в трёхмерном пространстве. Оно делит объём на 8 частей (октантов), и каждую из этих частей можно снова делить на 8, если нужно.\nНа практике используется в: 3D-играх – для определения видимых объектов, Физике – чтобы ускорить обработку столкновений (например, между пулями и стенами), Рендеринге – чтобы не отрисовывать то, чего не видно.\n"
    },
    {
        "question": "Почему квадродеревья удобны для сжатия изображений?",
        "options": [
            "Они хранят полные копии изображений",
            "Позволяют представлять однородные области как один узел",
            "Переводят изображение в спектр Фурье",
            "Используют только чёрно-белую палитру"
        ],
        "answer": "Позволяют представлять однородные области как один узел",
        "theory": "Представим изображение, разбитое на квадраты. Если в квадрате почти все пиксели одного цвета, то нет смысла хранить каждый из них по отдельности – можно просто хранить средний цвет для этого квадрата.\nКвадродерево как раз этим и занимается: Делит изображение на квадраты; Если квадрат однородный по цвету, он становится листом дерева; Если нет – делится дальше.\nТакое представление можно использовать для сжатия, потому что хранится меньше данных: вместо миллиона пикселей можно сохранить всего несколько десятков средних значений.\nПример применения: векторизация изображений, геоинформационные системы, компьютерное зрение."
    },
    {
        "question": "Почему квадродеревья полезны в играх при управлении большим количеством объектов (например, врагов или снарядов)?",
        "options": [
            "Обеспечивают случайное поведение",
            "Позволяют эффективно проверять столкновения между объектами",
            "Упрощают код",
            "Делают все объекты невидимыми вне экрана"
        ],
        "answer": "Позволяют эффективно проверять столкновения между объектами",
        "theory": "Квадродерево позволяет разбить игровое пространство на зоны. Вместо того чтобы проверять столкновение каждого объекта с каждым (O(n²)), мы проверяем только тех, кто находится рядом. Это снижает нагрузку на процессор и ускоряет обработку в реальном времени. Особенно эффективно в играх с большим числом пуль, врагов и физики."
    },
    {
        "question": "Что такое \"листья\" в контексте квадродерева или октодерева?",
        "options": [
            "Самые большие узлы дерева",
            "Узлы, в которых происходит деление",
            "Узлы без дочерних узлов, содержащие объекты",
            "Корневой узел"
        ],
        "answer": "Узлы без дочерних узлов, содержащие объекты",
        "theory": "Лист – это конечный узел дерева, в который попадает объект или набор объектов. Он не делится дальше. В листах хранится фактическая информация: точки, объекты, цвета (в случае изображений). Важно понимать, что листья – это те, куда доходят данные, и там происходит обработка."
    },
    {
        "question": "Какой минус может возникнуть при чрезмерной глубине квадродерева?",
        "options": ["Пропадание объектов", "Снижение точности координат", "Увеличение памяти и времени обработки", "Ошибки компиляции"],
        "answer": "Увеличение памяти и времени обработки",
        "theory": "Если дерево делится слишком глубоко, структура становится перегруженной, и вместо ускорения получается торможение. Это связано с тем, что приходится проходить много уровней дерева, увеличивается рекурсивная нагрузка или сложность обхода в цикле. Часто ограничивают глубину дерева и количество объектов в листе."
    },
    {
        "question": "Чем квадродерево отличается от обычного бинарного дерева?",
        "options": ["Количество хранимых объектов", "Метод поиска", "Количество детей у каждого узла", "Используемый язык программирования"],
        "answer": "Количество детей у каждого узла",
        "theory": "В бинарном дереве у каждого узла максимум 2 потомка (левый и правый), часто используется для сортировки (BST). В квадродереве у каждого узла 4 потомка – по направлению (лево-вверх, право-вверх, лево-вниз, право-вниз). Оно используется для разбиения двумерного пространства, а не для хранения чисел по порядку."
    },
    {
        "question": "Какой тип данных лучше всего хранить в октодереве при 3D-симуляции?",
        "options": ["Цвет пикселя", "Точки с тремя координатами", "Только координату X", "Двумерные изображения"],
        "answer": "Точки с тремя координатами",
        "theory": "Октодеревья применяются в трёхмерных пространствах, где каждый узел делится на 8 подузлов. Поэтому наиболее логично хранить точки в 3D, каждая из которых имеет координаты X, Y и Z. Это полезно при моделировании физических объектов, в 3D-играх, симуляциях, навигации и т.д."
    },
    {
        "question": "Почему квадродерево удобно использовать при визуализации фракталов или других рекурсивных структур?",
        "options": ["Оно случайным образом делит пространство", "Оно не использует память", "Оно идеально отражает структуру, основанную на делении на 4 части", "Оно упрощает генерацию случайных чисел"],
        "answer": "Оно идеально отражает структуру, основанную на делении на 4 части",
        "theory": "Фракталы (например, кривая Коха или ковер Серпинского) строятся через рекурсивное деление области. Квадродерево естественным образом отражает такую структуру, деля каждую область на 4 подчасти. Это позволяет эффективно визуализировать и хранить сложные формы, уменьшая объём данных за счёт структурного повторения."
    },
    {
        "question": "Что происходит, если количество объектов в листовом узле квадродерева превышает установленный лимит?",
        "options": ["Программа завершает работу", "Узел делится на четыре дочерних и объекты перераспределяются", "Лимит увеличивается", "Все объекты удаляются"],
        "answer": "Узел делится на четыре дочерних и объекты перераспределяются",
        "theory": "Квадродерево часто используется с условием: если в одном узле слишком много объектов, то он делится на четыре, и каждый объект перемещается в подходящий подузел. Это позволяет сохранить баланс между глубиной дерева и количеством объектов в каждом листе. Это ключевой механизм поддержания эффективности дерева."
    },
    {
        "question": "В чём отличие квадродерева от k-d дерева при работе с точками?",
        "options": ["В количестве координат", "В способе деления пространства", "В размере хранимых объектов", "В применяемом языке программирования"],
        "answer": "В способе деления пространства",
        "theory": "K-d дерево (k-dimensional tree) делит пространство по очереди по осям: сначала X, потом Y и так далее. Оно создаёт разбиение в виде линий, проходящих через пространство.\nКвадродерево, напротив, одновременно делит и по X, и по Y, образуя 4 квадранта. Это делает его более удобным для визуального представления и пространственного анализа на плоскости."
    },
    {
        "question": "Какое преимущество даёт октодерево в 3D-играх по сравнению с обычной сеткой (grid)?",
        "options": ["Оно всегда быстрее", "Оно требует больше памяти", "Оно динамически адаптирует детализацию пространства", "Оно упрощает музыку в игре"],
        "answer": "Оно динамически адаптирует детализацию пространства",
        "theory": "Статическая сетка разбивает всё пространство на одинаковые блоки, даже если объекты сосредоточены в одном месте. Октодерево же позволяет делить пространство только там, где это нужно, сохраняя мелкие области там, где плотность объектов высокая, и крупные – там, где их нет. Это снижает затраты ресурсов и увеличивает производительность в 3D-сценах."
    },
    {
        "question": "Как квадродеревья помогают ускорить обработку коллизий в 2D-играх?",
        "options": ["Проверяют только ближайшие объекты", "Увеличивают скорость персонажа", "Хранят список текстур", "Определяют оптимальный путь для ИИ"],
        "answer": "Проверяют только ближайшие объекты",
        "theory": "Вместо того чтобы проверять все объекты на столкновение друг с другом (что требует много вычислений), квадродерево позволяет проверять только те объекты, которые находятся в одном регионе или рядом. Это резко сокращает количество проверок, особенно в играх с множеством движущихся объектов (пули, враги, игрок и т.д.)."
    },
    {
        "question": "В каких случаях октодерево может заменить массивы в 3D-симуляции частиц?",
        "options": ["Если количество частиц фиксировано", "Если частицы всегда движутся по сетке", "Если важно ускорить поиск ближайших соседей", "Если нужно сохранить только координаты X"],
        "answer": "Если важно ускорить поиск ближайших соседей",
        "theory": "В 3D-симуляциях (например, гравитация, столкновения, поведение жидкости) часто нужно находить ближайшие частицы к каждой частице. Поиск в обычном массиве – медленный (O(n)). Октодерево позволяет ограничить поиск только нужной областью, значительно ускоряя симуляцию. Это особенно важно при работе с тысячами или миллионами объектов."
    },
    {
        "question": "Почему октодерево считается более подходящим для 3D-окружений, чем k-d дерево?",
        "options": ["Потому что октодерево использует меньше памяти", "Потому что оно делит пространство симметрично по всем осям", "Потому что оно двухмерное", "Потому что k-d дерево не поддерживает Z-координату"],
        "answer": "Потому что оно делит пространство симметрично по всем осям",
        "theory": "Октодерево одновременно делит пространство по всем трём координатам (X, Y, Z), создавая 8 равных объёмов. Это удобно для 3D-окружений, где важно учитывать всё пространство. В отличие от него, k-d дерево делит попеременно по одной оси, что может привести к неравномерному разбиению в некоторых случаях."
    },
    {
        "question": "Почему квадродерево может быть полезно при отображении масштабируемых карт (например, в GPS или RTS-играх)?",
        "options": ["Оно рисует карты автоматически", "Оно даёт возможность быстро переключаться между уровнями детализации", "Оно заменяет все иконки", "Оно показывает только дороги"],
        "answer": "Оно даёт возможность быстро переключаться между уровнями детализации",
        "theory": "При отображении больших карт нужно уметь масштабировать отображение: на крупном плане показывать только города, на мелком — улицы и дома. Квадродерево позволяет эффективно хранить объекты разной детализации в разных уровнях дерева, и подгружать нужные только при необходимости. Это экономит ресурсы и ускоряет рендеринг."
    },
    {
        "question": "Что является недостатком квадродерева при большом скоплении объектов в одной области?",
        "options": ["Узлы могут бесконечно делиться", "Возникает сильная разбалансировка дерева", "Невозможно найти объекты", "Оно не поддерживает удаление"],
        "answer": "Возникает сильная разбалансировка дерева",
        "theory": "Если объекты слишком скучены в одном участке, то только одна ветка дерева будет активно расти, остальные – почти пустые. Это создаёт неравномерную структуру, ухудшающую производительность поиска и вставки. Часто решается добавлением ограничений на глубину или использованием гибридных структур."
    },
    {
        "question": "В чём преимущество адаптивного (неравномерного) деления в квадродеревьях по сравнению с равномерным?",
        "options": ["Упрощает код", "Делает дерево симметричным", "Позволяет точнее разделять плотные регионы", "Используется только для графиков"],
        "answer": "Позволяет точнее разделять плотные регионы",
        "theory": "Адаптивное деление происходит только в тех областях, где это действительно нужно – например, в местах с высокой плотностью объектов или резкими переходами цвета на изображении. Это позволяет уменьшить количество узлов и добиться лучшей компрессии и производительности, особенно в графике и геоданных."
    },
    {
        "question": "Почему удаление объектов из квадро- или октодерева может быть проблематичным?",
        "options": ["Потому что узлы нельзя освободить", "Потому что дерево становится бинарным", "Потому что требуется перестраивать дерево или объединять узлы", "Потому что объекты теряются в памяти"],
        "answer": "Потому что требуется перестраивать дерево или объединять узлы",
        "theory": "После удаления объекта из узла дерево может стать разреженным – некоторые участки окажутся пустыми. Это требует либо объединения узлов, либо проверки, нужно ли удалять поддеревья. Эти операции часто сложнее вставки и требуют аккуратной реализации, особенно в реальном времени (например, в играх или 3D-редакторах)."
    },
    {
        "question": "Что делает квадродерево особенно эффективным для хранения спрайтов и объектов на 2D-картах?",
        "options": ["Оно сохраняет их в виде массива", "Оно позволяет сортировать их по цвету", "Оно группирует объекты по их положению в пространстве", "Оно заменяет текстуры"],
        "answer": "Оно группирует объекты по их положению в пространстве",
        "theory": "Квадродерево строит иерархию по пространственному положению, поэтому можно быстро определить, какие объекты находятся рядом – например, чтобы обновить только видимую часть карты или проверить столкновения."
    },
    {
        "question": "Почему в октодеревьях часто применяют минимальный порог глубины или размеров ячеек?",
        "options": ["Чтобы ускорить загрузку", "Чтобы сохранить только текстуры", "Чтобы предотвратить бесконечное деление", "Чтобы использовать меньше координат"],
        "answer": "Чтобы предотвратить бесконечное деление",
        "theory": "Если объекты очень маленькие или точки слишком близки друг к другу, дерево может начать делиться практически бесконечно, особенно при неаккуратной реализации. Ввод минимального размера узла – способ ограничить глубину и предотвратить тормоза."
    },
    {
        "question": "В каких случаях квадродерево может стать менее эффективным, чем простой список объектов?",
        "options": ["При большом числе пустых ячеек и редких объектах", "Когда все объекты одного цвета", "Когда точки расположены по спирали", "При использовании с изображениями"],
        "answer": "При большом числе пустых ячеек и редких объектах",
        "theory": "Квадродерево полезно, когда объекты равномерно распределены или когда поиск в области (range query) нужен. Но если в пространстве много пустоты, то дерево начинает создавать множество вложенных узлов впустую, потребляя память и CPU на их управление. В таких случаях проще обойтись простым списком – например, при 3 точках на огромной карте."
    },
    {
        "question": "Зачем может понадобиться пересборка (перестроение) квадродерева во время работы программы?",
        "options": ["Чтобы удалить старые объекты", "Чтобы уменьшить глубину", "Чтобы учесть перемещения объектов", "Чтобы оптимизировать цвет"],
        "answer": "Чтобы учесть перемещения объектов",
        "theory": "Квадродерево создаёт пространственную иерархию на основе текущих координат объектов. Если объекты двигаются, то они могут выйти из своих узлов, и дерево становится некорректным (ошибки при поиске коллизий, видимости и пр.). Тогда применяются: Удаление и повторная вставка (по одному объекту); или полная пересборка дерева – часто применяется при большом числе объектов (например, каждый кадр или раз в N шагов)."
    },
    {
        "question": "Почему важно, чтобы объекты в квадродереве были \"как можно более локализованы\"?",
        "options": ["Чтобы дерево было сбалансированным", "Чтобы уменьшить количество пересечений между узлами и объектами", "Чтобы уменьшить объём памяти", "Чтобы дерево было симметричным"],
        "answer": "Чтобы уменьшить количество пересечений между узлами и объектами",
        "theory": "Чтобы уменьшить объём памяти; Чтобы дерево было симметричным)\nЛокализация означает, что объект полностью входит в одну ячейку. Это ускоряет: Поиск объектов в области (range query); обнаружение коллизий и минимизирует дублирование, когда один объект попадает в несколько узлов."
    },
    {
        "question": "Какой подход позволяет ускорить построение квадродерева при большом числе статичных точек?",
        "options": ["Параллельное деление", "Сортировка по координатам перед вставкой", "Случайная вставка", "Деление вручную"],
        "answer": "Сортировка по координатам перед вставкой",
        "theory": "Если отсортировать точки по X или Y, можно быстрее разделять их при построении дерева, особенно при массовой загрузке. Это уменьшает количество проверок и позволяет использовать оптимизировать массовую вставку."
    },
    {
        "question": "Что происходит с глубиной квадродерева при увеличении плотности точек в одной области?",
        "options": ["Она уменьшается", "Она остаётся постоянной", "Она увеличивается", "Она становится отрицательной"],
        "answer": "Она увеличивается",
        "theory": "Если в одном регионе появляется много точек, дерево вынуждено делить этот участок всё глубже, чтобы распределить точки по подузлам. Это приводит к локальному углублению дерева, даже если вся остальная область почти пустая."
    },
    {
        "question": "Что произойдёт, если при вставке точки в квадродерево не проверять её координаты на принадлежность текущему узлу?",
        "options": ["Точка окажется в неправильном узле", "Точка не будет вставлена", "Программа ускорится", "Узлы объединятся"],
        "answer": "Точка окажется в неправильном узле",
        "theory": "Без проверки координат можно случайно вставить точку в неподходящий подузел, нарушив структуру дерева. Это приведёт к неверной работе поиска, удаления и визуализации."
    },
    {
        "question": "Почему для квадродерева обычно устанавливают максимальное количество объектов в узле перед делением?",
        "options": ["Чтобы ограничить количество уровней", "Чтобы избежать ненужных делений", "Чтобы уменьшить координаты", "Чтобы сделать дерево сбалансированным"],
        "answer": "Чтобы избежать ненужных делений",
        "theory": "Если каждый узел будет делиться при малейшем добавлении точки, то дерево станет слишком глубоким и медленным. Порог (например, 4 объекта) позволяет контролировать глубину и оптимизировать построение."
    },
    {
        "question": "Как можно ускорить поиск всех точек в заданном прямоугольнике с помощью квадродерева?",
        "options": ["Проверять каждый лист, даже пустой", "Проверять только те узлы, чья область пересекается с прямоугольником", "Хранить все точки в одном массиве", "Искать только в корневом узле"],
        "answer": "Проверять только те узлы, чья область пересекается с прямоугольником",
        "theory": "При поиске в области (range query) квадродерево позволяет пропускать те узлы, которые не пересекаются с областью запроса. Это снижает число проверок и ускоряет работу по сравнению с полным перебором."
    },
    {
        "question": "Что отличает процесс вставки объектов в квадродерево от построения дерева по заранее известному набору данных?",
        "options": ["В первом случае используется случайность", "Вставка медленнее, чем массовое построение", "При построении нельзя делить узлы", "Разницы нет"],
        "answer": "Вставка медленнее, чем массовое построение",
        "theory": "Пошаговая вставка (insert) – менее эффективна, так как каждую точку приходится рекурсивно искать куда вставить. При заранее известном наборе можно использовать bulk-loading, чтобы построить дерево быстрее.\nBulk-loading (пакетная загрузка) – это способ построения дерева (например, квадродерева или октодерева) по заранее известному набору объектов. Вместо того чтобы вставлять каждый объект по одному, можно сначала: отсортировать или сгруппировать данные; построить дерево сразу с нужной структурой, минимизируя количество делений.\nЭтот способ быстрее, так как уменьшает количество вставок и проверок, и чаще всего приводит к более сбалансированной структуре, особенно если данные равномерно распределены."
    },
    {
        "question": "Когда квадродерево становится \"глубоким\", что это означает?",
        "options": ["В нём много цветов", "У него много уровней вложенных узлов", "Он содержит только один объект", "Его ширина увеличилась"],
        "answer": "У него много уровней вложенных узлов",
        "theory": "“Глубина” дерева – это количество уровней вложенности от корня до самого дальнего листа. Глубокие деревья медленнее при вставке и поиске, особенно если деления происходят из-за скученности точек."
    },
    {
        "question": "В чём главное отличие структуры квадродерева от октодерева?",
        "options": ["Квадродерево работает быстрее", "Октодерево делит пространство на 8 частей, а квадродерево – на 4", "Квадродерево делит пространство на 8 частей, а октодерево – на 4", "Октодерево используется только для поиска"],
        "answer": "Октодерево делит пространство на 8 частей, а квадродерево – на 4",
        "theory": "Квадродерево делит 2D-пространство (плоскость) на 4 региона, октодерево – 3D-пространство (объём) на 8. Это определяет область применения: картинки и карты – quadtree, 3D-миры и физика – octree."
    },
    {
        "question": "Что обычно сложнее визуализировать: квадродерево или октодерево?",
        "options": ["Квадродерево, потому что оно шире", "Октодерево, потому что находится в 3D-пространстве", "Оба визуализируются одинаково", "Квадродерево из-за рекурсии"],
        "answer": "Октодерево, потому что находится в 3D-пространстве",
        "theory": "Визуализация октодерева требует трёхмерной отрисовки, с камерами, перспективой и освещением. В отличие от квадродерева, которое можно легко показать как сетку на 2D-экране, октодерево требует объёмного рендера."
    },
    {
        "question": "Что означает термин \"обход дерева\" в контексте квадродерева или октодерева?",
        "options": ["Отображение дерева на экране", "Последовательный просмотр всех узлов", "Удаление ненужных узлов", "Сжатие дерева"],
        "answer": "Последовательный просмотр всех узлов",
        "theory": "Обход – это последовательный просмотр узлов, чтобы, например, найти точки, обработать данные или отрисовать дерево. Может быть: в глубину (DFS), в ширину (BFS) и др. В деревьях важен для анализа, поиска, сбора статистики."
    },
    {
        "question": "Почему октодерево может занимать больше памяти, чем квадродерево?",
        "options": ["Оно хранит больше изображений", "У него больше дочерних узлов", "Оно требует меньше уровней", "Это зависит от языка программирования"],
        "answer": "У него больше дочерних узлов",
        "theory": "Каждый узел октодерева имеет 8 потомков, а у квадродерева – только 4. Это увеличивает объём указателей и вложенных структур, особенно при большой глубине дерева. Поэтому памяти тратится больше при равных условиях."
    }
]
